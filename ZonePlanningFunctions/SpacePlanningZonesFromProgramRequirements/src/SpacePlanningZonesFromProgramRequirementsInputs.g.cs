// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace SpacePlanningZonesFromProgramRequirements
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class SpacePlanningZonesFromProgramRequirementsInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public SpacePlanningZonesFromProgramRequirementsInputs(string @defaultProgramAssignment, Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<SpacePlanningZonesFromProgramRequirementsInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @defaultProgramAssignment, @overrides});
            }
        
            this.DefaultProgramAssignment = @defaultProgramAssignment;
            this.Overrides = @overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>What would you like the default program for all zones to be? If specified, this program type will be used to fill all floor area not specified with specific blocks.</summary>
        [Newtonsoft.Json.JsonProperty("Default Program Assignment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultProgramAssignment { get; set; } = "unspecified";
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Overrides 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(IList<ArrangeSpacesOverride> @arrangeSpaces, IList<MassBoundariesOverride> @massBoundaries)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @arrangeSpaces, @massBoundaries});
            }
        
            this.ArrangeSpaces = @arrangeSpaces;
            this.MassBoundaries = @massBoundaries;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Arrange Spaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<ArrangeSpacesOverride> ArrangeSpaces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mass Boundaries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassBoundariesOverride> MassBoundaries { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class ArrangeSpacesOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ArrangeSpacesOverride(string @id, ArrangeSpacesIdentity @identity, ArrangeSpacesValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ArrangeSpacesOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArrangeSpacesIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ArrangeSpacesValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassBoundariesOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassBoundariesOverride(string @id, MassBoundariesIdentity @identity, MassBoundariesValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassBoundariesOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassBoundariesIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassBoundariesValue Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class ArrangeSpacesIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ArrangeSpacesIdentity(string @identifier)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ArrangeSpacesIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @identifier});
            }
        
            this.Identifier = @identifier;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class ArrangeSpacesValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public ArrangeSpacesValue(Transform @transform)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<ArrangeSpacesValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @transform});
            }
        
            this.Transform = @transform;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassBoundariesIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassBoundariesIdentity(string @identifier, Transform @editBoundaryTransform)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassBoundariesIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @identifier, @editBoundaryTransform});
            }
        
            this.Identifier = @identifier;
            this.EditBoundaryTransform = @editBoundaryTransform;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("EditBoundaryTransform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform EditBoundaryTransform { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassBoundariesValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassBoundariesValue(Polygon @editBoundary)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassBoundariesValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @editBoundary});
            }
        
            this.EditBoundary = @editBoundary;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("EditBoundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon EditBoundary { get; set; }
    
    
    }
}