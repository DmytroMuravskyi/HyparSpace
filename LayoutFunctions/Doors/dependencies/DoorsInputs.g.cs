// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Doors
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public  class DoorsInputs : ArgsBase
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public DoorsInputs(double @defaultDoorWidth, double @defaultDoorHeight, DoorsInputsDefaultDoorOpeningSide @defaultDoorOpeningSide, DoorsInputsDefaultDoorOpeningType @defaultDoorOpeningType, Overrides @overrides, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorsInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @defaultDoorWidth, @defaultDoorHeight, @defaultDoorOpeningSide, @defaultDoorOpeningType, @overrides});
            }
        
            this.DefaultDoorWidth = @defaultDoorWidth;
            this.DefaultDoorHeight = @defaultDoorHeight;
            this.DefaultDoorOpeningSide = @defaultDoorOpeningSide;
            this.DefaultDoorOpeningType = @defaultDoorOpeningType;
            this.Overrides = @overrides ?? this.Overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>Width of a door panel without a frame. For double doors, the clear width will be double the door width.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.8128D, 1.2192D)]
        public double DefaultDoorWidth { get; set; } = 0.9144D;
    
        /// <summary>Height of a door without a frame.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.032D, 2.54D)]
        public double DefaultDoorHeight { get; set; } = 2.1D;
    
        /// <summary>The opening side of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Opening Side", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorsInputsDefaultDoorOpeningSide DefaultDoorOpeningSide { get; set; } = DoorsInputsDefaultDoorOpeningSide.Left_Hand;
    
        /// <summary>The type of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Opening Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorsInputsDefaultDoorOpeningType DefaultDoorOpeningType { get; set; } = DoorsInputsDefaultDoorOpeningType.Single_Swing;
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; } = new Overrides();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorsInputsDefaultDoorOpeningSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Left Hand")]
        Left_Hand = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Right Hand")]
        Right_Hand = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Door")]
        Double_Door = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorsInputsDefaultDoorOpeningType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Single Swing")]
        Single_Swing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Swing")]
        Double_Swing = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class Overrides 
    
    {
        public Overrides() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(OverrideAdditions @additions, OverrideRemovals @removals, IList<DoorPositionsOverride> @doorPositions)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @additions, @removals, @doorPositions});
            }
        
            this.Additions = @additions ?? this.Additions;
            this.Removals = @removals ?? this.Removals;
            this.DoorPositions = @doorPositions ?? this.DoorPositions;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideAdditions Additions { get; set; } = new OverrideAdditions();
    
        [Newtonsoft.Json.JsonProperty("Removals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideRemovals Removals { get; set; } = new OverrideRemovals();
    
        [Newtonsoft.Json.JsonProperty("Door Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<DoorPositionsOverride> DoorPositions { get; set; } = new List<DoorPositionsOverride>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class OverrideAdditions 
    
    {
        public OverrideAdditions() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideAdditions(IList<DoorPositionsOverrideAddition> @doorPositions)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideAdditions>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @doorPositions});
            }
        
            this.DoorPositions = @doorPositions ?? this.DoorPositions;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Door Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<DoorPositionsOverrideAddition> DoorPositions { get; set; } = new List<DoorPositionsOverrideAddition>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class OverrideRemovals 
    
    {
        public OverrideRemovals() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideRemovals(IList<DoorPositionsOverrideRemoval> @doorPositions)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideRemovals>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @doorPositions});
            }
        
            this.DoorPositions = @doorPositions ?? this.DoorPositions;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Door Positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<DoorPositionsOverrideRemoval> DoorPositions { get; set; } = new List<DoorPositionsOverrideRemoval>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsOverride(string @id, DoorPositionsIdentity @identity, DoorPositionsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoorPositionsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoorPositionsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsOverrideAddition 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsOverrideAddition(string @id, DoorPositionsIdentity @identity, DoorPositionsOverrideAdditionValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsOverrideAddition>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoorPositionsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoorPositionsOverrideAdditionValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsOverrideRemoval 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsOverrideRemoval(string @id, DoorPositionsIdentity @identity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsOverrideRemoval>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity});
            }
        
            this.Id = @id;
            this.Identity = @identity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DoorPositionsIdentity Identity { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsIdentity(Vector3 @originalPosition)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @originalPosition});
            }
        
            this.OriginalPosition = @originalPosition;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("OriginalPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vector3 OriginalPosition { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsValue(Transform @transform, double @doorWidth, double @doorHeight, DoorPositionsValueDefaultDoorOpeningSide @defaultDoorOpeningSide, DoorPositionsValueDefaultDoorOpeningType @defaultDoorOpeningType)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @transform, @doorWidth, @doorHeight, @defaultDoorOpeningSide, @defaultDoorOpeningType});
            }
        
            this.Transform = @transform;
            this.DoorWidth = @doorWidth;
            this.DoorHeight = @doorHeight;
            this.DefaultDoorOpeningSide = @defaultDoorOpeningSide;
            this.DefaultDoorOpeningType = @defaultDoorOpeningType;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }
    
        /// <summary>Width of a door panel without a frame. For double doors, the clear width will be double the door width.</summary>
        [Newtonsoft.Json.JsonProperty("Door Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.8128D, 1.2192D)]
        public double DoorWidth { get; set; } = 0.9144D;
    
        /// <summary>Height of a door without a frame.</summary>
        [Newtonsoft.Json.JsonProperty("Door Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.032D, 2.54D)]
        public double DoorHeight { get; set; } = 2.1D;
    
        /// <summary>The opening side of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Opening Side", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorPositionsValueDefaultDoorOpeningSide DefaultDoorOpeningSide { get; set; } = DoorPositionsValueDefaultDoorOpeningSide.Left_Hand;
    
        /// <summary>The type of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Default Door Opening Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorPositionsValueDefaultDoorOpeningType DefaultDoorOpeningType { get; set; } = DoorPositionsValueDefaultDoorOpeningType.Single_Swing;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    
    public partial class DoorPositionsOverrideAdditionValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public DoorPositionsOverrideAdditionValue(Transform @transform, double @doorWidth, double @doorHeight, DoorPositionsOverrideAdditionValueDoorOpeningSide @doorOpeningSide, DoorPositionsOverrideAdditionValueDoorOpeningType @doorOpeningType)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<DoorPositionsOverrideAdditionValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @transform, @doorWidth, @doorHeight, @doorOpeningSide, @doorOpeningType});
            }
        
            this.Transform = @transform;
            this.DoorWidth = @doorWidth;
            this.DoorHeight = @doorHeight;
            this.DoorOpeningSide = @doorOpeningSide;
            this.DoorOpeningType = @doorOpeningType;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }
    
        /// <summary>Width of a door panel without a frame. For double doors, the clear width will be double the door width.</summary>
        [Newtonsoft.Json.JsonProperty("Door Width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.8128D, 1.2192D)]
        public double DoorWidth { get; set; } = 0.9144D;
    
        /// <summary>Height of a door without a frame.</summary>
        [Newtonsoft.Json.JsonProperty("Door Height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2.032D, 2.54D)]
        public double DoorHeight { get; set; } = 2.1D;
    
        /// <summary>The opening side of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Door Opening Side", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorPositionsOverrideAdditionValueDoorOpeningSide DoorOpeningSide { get; set; } = DoorPositionsOverrideAdditionValueDoorOpeningSide.Left_Hand;
    
        /// <summary>The type of a door.</summary>
        [Newtonsoft.Json.JsonProperty("Door Opening Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DoorPositionsOverrideAdditionValueDoorOpeningType DoorOpeningType { get; set; } = DoorPositionsOverrideAdditionValueDoorOpeningType.Single_Swing;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorPositionsValueDefaultDoorOpeningSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Left Hand")]
        Left_Hand = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Right Hand")]
        Right_Hand = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Door")]
        Double_Door = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorPositionsValueDefaultDoorOpeningType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Single Swing")]
        Single_Swing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Swing")]
        Double_Swing = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorPositionsOverrideAdditionValueDoorOpeningSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Left Hand")]
        Left_Hand = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Right Hand")]
        Right_Hand = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Door")]
        Double_Door = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public enum DoorPositionsOverrideAdditionValueDoorOpeningType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Single Swing")]
        Single_Swing = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Double Swing")]
        Double_Swing = 1,
    
    }
}