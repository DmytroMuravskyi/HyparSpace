
// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar test generate'.
// DO NOT EDIT THIS FILE.

using Elements;
using Xunit;
using System.IO;
using System.Collections.Generic;
using Elements.Serialization.glTF;

namespace SpacePlanningZones
{
    public class SpacePlanningZonesTest
    {
        [Fact]
        public void TestExecute()
        {
            var input = GetInput();

            var modelDependencies = new Dictionary<string, Model> { 
                {"Levels", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Levels/model.json")) }, 
                {"Floors", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Floors/model.json")) }, 
                {"Core", Model.FromJson(File.ReadAllText(@"/Users/andrewheumann/Dev/HyparSpace/ZonePlanningFunctions/SpacePlanningZones/test/Generated/SpacePlanningZonesTest/model_dependencies/Core/model.json")) }, 
            };

            var result = SpacePlanningZones.Execute(modelDependencies, input);
            result.Model.ToGlTF("../../../Generated/SpacePlanningZonesTest/results/SpacePlanningZonesTest.gltf", false);
            result.Model.ToGlTF("../../../Generated/SpacePlanningZonesTest/results/SpacePlanningZonesTest.glb");
            File.WriteAllText("../../../Generated/SpacePlanningZonesTest/results/SpacePlanningZonesTest.json", result.Model.ToJson());
        }

        public SpacePlanningZonesInputs GetInput()
        {
            var inputText = @"
            {
  ""Default Program Assignment"": ""unspecified"",
  ""Circulation Mode"": ""Manual"",
  ""Add Corridors"": {
    ""SplitLocations"": []
  },
  ""Depth at Ends"": 8,
  ""Split Zones"": {
    ""SplitLocations"": []
  },
  ""Corridors"": [],
  ""Corridor Width"": 1.5,
  ""Outer Band Depth"": 6,
  ""Manual Split Locations"": [],
  ""model_input_keys"": {
    ""Levels"": ""1793d93b-9594-4956-96e1-a812b6ec0f88_2c571838-6789-48e3-819f-edcf448c3085_elements.zip"",
    ""Floors"": ""bcae7650-78cf-4b4e-8de8-7def24bd3d51_c3bb78fd-7dee-41cc-ae2e-f1b4b4ae2794_elements.zip"",
    ""Core"": ""51042f62-976b-435b-8ebf-2916967250b3_a9cac5a1-f68d-4d2e-bfdd-0d204359bbe4_elements.zip""
  },
  ""overrides"": {
    ""Program Assignments"": [
      {
        ""value"": {
          ""Split"": 1,
          ""Id"": ""6ce5b07e-4f5c-4db1-8a93-56c8e868cb26"",
          ""Program Type"": ""Private Office""
        },
        ""identity"": {
          ""ParentCentroid"": {
            ""X"": -54.019177272727276,
            ""Y"": -99.78101909090907,
            ""Z"": 16.764
          },
          ""IndividualCentroid"": {
            ""X"": -54.019177272727276,
            ""Y"": -99.78101909090907,
            ""Z"": 16.764
          }
        },
        ""id"": ""9c4b180a-55e6-4088-9bc5-b2ec5890118b""
      }
    ]
  },
  ""Additional Corridor Locations"": []
}
            ";
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpacePlanningZonesInputs>(inputText);
        }
    }
}